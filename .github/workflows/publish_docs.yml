name: "Generate Documentation and Publish Release"

on:
  workflow_run:
    workflows: ["Synthesis and Results"]  # The exact name from synth_sta.yml
    types: [completed]

jobs:
  docs-and-release:
    runs-on: ubuntu-latest
    if: ${{ !contains(github.event.head_commit.message, '[gh-bot]') }}
    
    permissions:
      contents: write

    steps:
      - name: Check out repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install Nix
        uses: cachix/install-nix-action@v27
        with:
          nix_path: nixpkgs=channel:nixos-unstable

      - name: Run Nix Cache
        uses: DeterminateSystems/magic-nix-cache-action@v2
        
      - name: Install LaTeX
        run: |
          sudo apt-get update
          sudo apt-get install -y texlive-latex-base texlive-latex-recommended texlive-latex-extra

      - name: Inject dynamic table into syn.tex
        run: |
          SYN_TEX="doc/user-guide/syn.tex"
          RESULTS_TEX="out/results/synth-results.tex"

          if [ -f "$RESULTS_TEX" ] && [ -f "$SYN_TEX" ]; then
            echo "Backing up $SYN_TEX"
            cp "$SYN_TEX" "${SYN_TEX}.bak"

            echo "Removing old table from $SYN_TEX"
            sed -i '/\\begin{longtable}/,/\\end{longtable}/d' "$SYN_TEX"

            echo "Inserting dynamic snippet"
            pwd 
            sed -i '/\\subsection{Area and Gate Count}/a \\input{../../out/results/synth-results.tex}' "$SYN_TEX"
          else
            echo "No $RESULTS_TEX or no $SYN_TEX. Skipping table injection."
          fi
      
      - name: Build Documentation
        run: |
          nix develop --command make docs

      - name: Collect artifacts
        run: |
          mkdir -p release_artifacts
          
          # PDFs
          if [ -d "out/doc" ]; then
            find out/doc -name "*.pdf" -exec cp {} release_artifacts/ \;
          fi
          
          # Verilog
          if [ -d "generated" ]; then
            find generated -name "*.v" -exec cp {} release_artifacts/ \;
          fi
          
          # Netlists
          if [ -d "out/synth" ]; then
            find out/synth -name "*.v" -exec cp {} release_artifacts/ \;
          fi
          
          # JSON / TEX
          if [ -d "out/results" ]; then
            cp -r out/results/* release_artifacts/ || true
          fi

          echo "Listing release_artifacts..."
          ls -la release_artifacts
          
          tar -czvf release_artifacts.tar.gz release_artifacts/

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            release_artifacts.tar.gz
            release_artifacts/*.pdf
            release_artifacts/*.v
            release_artifacts/*.json
            release_artifacts/*.tex
          tag_name: v${{ github.run_number }}
          name: "Release ${{ github.run_number }}"
          body: |
            Automated Release
          draft: false
          prerelease: false
