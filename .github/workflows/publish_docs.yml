name: "Generate Documentation and Publish Release"

on:
  workflow_run:
    workflows: ["Synthesis and Results"]  # Must match the name from synth_sta.yml
    types: [completed]

jobs:
  docs-and-release:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest

    permissions:
      contents: write

    steps:
      - name: Check out repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install Nix
        uses: cachix/install-nix-action@v27
        with:
          nix_path: nixpkgs=channel:nixos-unstable

      - name: Run Nix Cache
        uses: DeterminateSystems/magic-nix-cache-action@v2
        
      - name: Install LaTeX
        run: |
          sudo apt-get update
          sudo apt-get install -y texlive-latex-base texlive-latex-recommended texlive-latex-extra

      - name: Download results artifacts
        uses: actions/download-artifact@v3
        with:
          name: synthesis-results
          path: out/results

      - name: Remove old table & use \input
        run: |
          SYN_TEX="doc/user-guide/syn.tex"
          SNIPPET_NOEXT="synthResultsSnippet"
          SNIPPET_PATH="out/results/${SNIPPET_NOEXT}.tex"

          if [ -f "$SYN_TEX" ] && [ -f "$SNIPPET_PATH" ]; then
            echo "Backing up $SYN_TEX"
            cp "$SYN_TEX" "$SYN_TEX.bak"

            echo "Removing old static table..."
            sed -i '/\\begin{longtable}/,/\\end{longtable}/d' "$SYN_TEX"

            echo "Inserting a \\input statement"
            sed -i "/\\subsection{Area and Gate Count}/a \\input{../../out/results/${SNIPPET_NOEXT}}" "$SYN_TEX"
          else
            echo "Missing snippet or syn.tex. Skipping injection."

      - name: Build Documentation
        run: |
          nix develop --command make docs

      - name: Collect artifacts
        run: |
          mkdir -p release_artifacts

          if [ -d out/doc ]; then
            find out/doc -name "*.pdf" -exec cp {} release_artifacts/ \;
          fi
          if [ -d generated ]; then
            find generated -name "*.v" -exec cp {} release_artifacts/ \;
          fi
          if [ -d out/synth ]; then
            find out/synth -name "*.v" -exec cp {} release_artifacts/ \;
          fi
          if [ -d out/results ]; then
            cp -r out/results/* release_artifacts/ || true
          fi

          echo "Artifacts in release_artifacts:"
          ls -la release_artifacts

          tar -czvf release_artifacts.tar.gz release_artifacts/

      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            release_artifacts.tar.gz
            release_artifacts/*.pdf
            release_artifacts/*.v
            release_artifacts/*.json
            release_artifacts/*.tex
          tag_name: v${{ github.run_number }}
          name: "Release ${{ github.run_number }}"
          draft: false
          prerelease: false
