name: "Generate Documentation and Publish Release"

on:
  workflow_run:
    workflows: ["Synthesis and Results"]
    types: [completed]

jobs:
  docs-and-release:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest

    permissions:
      contents: write
      actions: read

    steps:
      - name: Check out repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Download the "synthesis-results" artifact from the completed Synthesis workflow
      - name: Download artifacts from synthesis workflow
        uses: dawidd6/action-download-artifact@v2
        with:
          workflow: "Synthesis and Results"
          workflow_conclusion: success
          run_id: ${{ github.event.workflow_run.id }}
          # By default, it will download them into a folder named after the artifact (synthesis-results/).

      - name: Inspect downloaded artifacts
        run: |
          echo "Files downloaded from the synthesis workflow:"
          ls -R

      - name: Move results into out/ folder
        run: |
          mkdir -p out/results
          # The downloaded folder is "synthesis-results" by default
          cp -r synthesis-results/results out/
          # Also copy any .v files
          find synthesis-results -name "*.v" -exec cp {} out/ \;

          echo "Now out/results has..."
          ls -la out/results

      - name: Install Nix
        uses: cachix/install-nix-action@v27
        with:
          nix_path: nixpkgs=channel:nixos-unstable

      - name: Run Nix Cache
        uses: DeterminateSystems/magic-nix-cache-action@v2
        
      - name: Install LaTeX
        run: |
          sudo apt-get update
          sudo apt-get install -y texlive-latex-base texlive-latex-recommended texlive-latex-extra

      - name: Remove old table & use \input
        run: |
          SYN_TEX="doc/user-guide/syn.tex"
          SNIPPET_NOEXT="synthResultsSnippet"
          SNIPPET_PATH="out/results/${SNIPPET_NOEXT}.tex"

          if [ -f "$SYN_TEX" ] && [ -f "$SNIPPET_PATH" ]; then
            echo "Backing up $SYN_TEX"
            cp "$SYN_TEX" "$SYN_TEX.bak"

            echo "Removing old static table..."
            sed -i '/\\begin{longtable}/,/\\end{longtable}/d' "$SYN_TEX"

            echo "Inserting a \\input statement"
            sed -i "/\\subsection{Area and Gate Count}/a \\input{../../out/results/${SNIPPET_NOEXT}}" "$SYN_TEX"
          else
            echo "Missing $SYN_TEX or $SNIPPET_PATH; skipping injection."
          fi

      - name: Build Documentation
        run: |
          nix develop --command make docs

      - name: Collect artifacts for release
        run: |
          mkdir -p release_artifacts

          # PDF(s)
          if [ -d out/doc ]; then
            find out/doc -name "*.pdf" -exec cp {} release_artifacts/ \;
          fi
          # Verilog netlists
          find synthesis-results -name "*.v" -exec cp {} release_artifacts/ \;
          # JSON / snippet .tex
          cp -r out/results/* release_artifacts/ || true

          echo "Listing release_artifacts:"
          ls -la release_artifacts

          tar -czvf release_artifacts.tar.gz release_artifacts/

      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            release_artifacts.tar.gz
            release_artifacts/*.pdf
            release_artifacts/*.v
            release_artifacts/*.json
            release_artifacts/*.tex
          tag_name: v${{ github.run_number }}
          name: "Release ${{ github.run_number }}"
          draft: false
          prerelease: false
