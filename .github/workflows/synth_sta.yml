name: Synthesis and Results

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]
    
jobs:
  synth-and-publish:
    runs-on: ubuntu-latest
    # Ensures actions don't run on bot commits
    if: ${{ !contains(github.event.head_commit.message, '[gh-bot]') }}
    
    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history

      - name: Install Nix
        uses: cachix/install-nix-action@v27
        with:
          nix_path: nixpkgs=channel:nixos-unstable

      - name: Run Nix Cache
        uses: DeterminateSystems/magic-nix-cache-action@v2

      - name: Run Synthesis
        run: nix develop --command make synth

      - name: Run Static Timing Analysis
        run: nix develop --command make sta
        
      - name: Prepare output directory
        run: mkdir -p out/results

      - name: Parse all config directories
        run: |
          # We will store an array of config objects in this JSON:
          echo "[]" > out/results/synth_results.json

          # Also create/overwrite a LaTeX snippet that we'll append rows to:
          echo "% Auto-generated table rows" > out/results/synth_table_rows.tex

          CONFIG_DIRS=$(find out/synth -type d -name "*bits*sync*baud*" | sort)
          if [ -z "$CONFIG_DIRS" ]; then
            echo "Error: No synthesis results found in out/synth"
            exit 1
          fi

          for d in $CONFIG_DIRS; do
            echo "Processing: $d"
            CONFIG_NAME=$(basename "$d")

            # gates.txt
            GATES="N/A"
            [ -f "$d/gates.txt" ] && GATES=$(cat "$d/gates.txt")

            # Metrics from log.txt
            AREA="N/A"
            COMBO_CELLS="N/A"
            SEQ_CELLS="N/A"
            BUF_INV_CELLS="N/A"
            CLOCK_PERIOD="5.0"
            SLACK="0.0"
            CRITICAL_PATH="N/A"
            SETUP_TIME="N/A"
            HOLD_TIME="N/A"
            MAX_FREQ="200.00"

            if [ -f "$d/log.txt" ]; then
              AREA=$(grep "Chip area" "$d/log.txt" | awk '{print $5}' || echo "N/A")
              COMBO_CELLS=$(grep "Combinational cells:" "$d/log.txt" | awk '{print $3}' || echo "N/A")
              SEQ_CELLS=$(grep "Sequential cells:" "$d/log.txt" | awk '{print $3}' || echo "N/A")
              BUF_INV_CELLS=$(grep "Buf/Inv cells:" "$d/log.txt" | awk '{print $3}' || echo "N/A")

              tmp_clock=$(grep "Clock period:" "$d/log.txt" | awk '{print $3}')
              tmp_slack=$(grep "Slack:" "$d/log.txt" | head -1 | awk '{print $2}')
              tmp_cp=$(grep -A 1 "Critical path" "$d/log.txt" | grep -v "Critical path" | head -1 | tr -s ' ' | cut -d' ' -f2-)
              tmp_setup=$(grep "Setup time:" "$d/log.txt" | awk '{print $3}')
              tmp_hold=$(grep "Hold time:" "$d/log.txt" | awk '{print $3}')

              [ -n "$tmp_clock" ] && CLOCK_PERIOD=$tmp_clock
              [ -n "$tmp_slack" ] && SLACK=$tmp_slack
              [ -n "$tmp_cp" ] && CRITICAL_PATH=$tmp_cp
              [ -n "$tmp_setup" ] && SETUP_TIME=$tmp_setup
              [ -n "$tmp_hold" ] && HOLD_TIME=$tmp_hold

              # Calculate frequency
              freq_calc=$(awk "BEGIN {print 1000/$CLOCK_PERIOD}" 2>/dev/null)
              [ -n "$freq_calc" ] && MAX_FREQ=$(printf "%.2f" "$freq_calc")
            fi

            # Mark if Slack >= 0 => STA passes
            STA_PASSES="Yes"
            SLACK_SIGN=$(awk "BEGIN {print ($SLACK < 0) ? 1 : 0}")
            if [ "$SLACK_SIGN" -eq 1 ]; then
              STA_PASSES="No"
            fi

            # Basic parsing from directory name "8bits_2sync_900000baud"
            DATA_BITS=$(echo "$CONFIG_NAME" | grep -oE '^[0-9]+bits' | sed 's/bits//')
            FIFO_DEPTH=$(echo "$CONFIG_NAME" | grep -oE '_[0-9]+sync_' | tr -dc '0-9')
            BAUD=$(echo "$CONFIG_NAME" | grep -oE '[0-9]+baud' | sed 's/baud//')

            DATA_BITS="${DATA_BITS:-N/A}"
            FIFO_DEPTH="${FIFO_DEPTH:-N/A}"
            BAUD="${BAUD:-N/A}"

            # Construct a JSON object, then append it to the array in synth_results.json
            newObj=$(jq -n \
              --arg cfg   "$CONFIG_NAME" \
              --arg gates "$GATES" \
              --arg area  "$AREA" \
              --arg combo "$COMBO_CELLS" \
              --arg seq   "$SEQ_CELLS" \
              --arg buf   "$BUF_INV_CELLS" \
              --arg bits  "$DATA_BITS" \
              --arg depth "$FIFO_DEPTH" \
              --arg baud  "$BAUD" \
              --arg cper  "$CLOCK_PERIOD" \
              --arg slk   "$SLACK" \
              --arg cpath "$CRITICAL_PATH" \
              --arg stime "$SETUP_TIME" \
              --arg htime "$HOLD_TIME" \
              --arg freq  "$MAX_FREQ" \
              --arg pass  "$STA_PASSES" \
              '{
                config_name: $cfg,
                gates: $gates,
                area: $area,
                combinational_cells: $combo,
                sequential_cells: $seq,
                buffer_inverter_cells: $buf,
                data_bits: $bits,
                fifo_depth: $depth,
                baud: $baud,
                timing: {
                  clock_period: $cper,
                  slack: $slk,
                  critical_path: $cpath,
                  setup_time: $stime,
                  hold_time: $htime,
                  max_frequency_mhz: $freq,
                  sta_passes: $pass
                }
              }'
            )

            tmpfile=$(mktemp)
            jq ". + [ $newObj ]" out/results/synth_results.json > "$tmpfile"
            mv "$tmpfile" out/results/synth_results.json

            # Append a row to the table snippet
            echo "\\texttt{$CONFIG_NAME} & $FIFO_DEPTH & $DATA_BITS & $GATES \\\\ \\hline" >> out/results/synth_table_rows.tex

          done

          # Now create a final .tex that wraps the rows in a table
          cat <<EOF > out/results/synth_results.tex
% Auto-generated table of all configs
\\renewcommand*{\\arraystretch}{1.3}
\\rowcolors{2}{gray!30}{gray!10}
\\begin{longtable}[H]{| p{0.22\\textwidth} | p{0.18\\textwidth} | p{0.20\\textwidth} | p{0.30\\textwidth} |}
\\hline
\\rowcolor{gray}
\\textcolor{white}{\\textbf{Config}} &
\\textcolor{white}{\\textbf{FIFO Depth}} &
\\textcolor{white}{\\textbf{Data Bits}} &
\\textcolor{white}{\\textbf{Gate Count}} \\\\
\\hline
\\endfirsthead

\\hline
\\rowcolor{gray}
\\textcolor{white}{\\textbf{Config}} &
\\textcolor{white}{\\textbf{FIFO Depth}} &
\\textcolor{white}{\\textbf{Data Bits}} &
\\textcolor{white}{\\textbf{Gate Count}} \\\\
\\hline
\\endhead

\\hline
\\endfoot
EOF

          cat out/results/synth_table_rows.tex >> out/results/synth_results.tex

          cat <<EOF >> out/results/synth_results.tex
\\caption{Synthesis Results for All Configs}
\\end{longtable}
EOF

      - name: Generate Verilog
        run: nix develop --command make verilog
        
      - name: Commit results
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          
          git add --force out/results

          if git diff --staged --quiet; then
            echo "No changes to commit."
          else
            git commit -m "[gh-bot] Update synthesis/STA results"
            git pull --rebase origin main
            git push origin main
          fi
