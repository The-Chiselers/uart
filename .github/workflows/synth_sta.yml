name: "Synthesis and Results"

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  synth-and-publish:
    runs-on: ubuntu-latest
    if: ${{ !contains(github.event.head_commit.message, '[gh-bot]') }}

    steps:
      - name: Check out repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install Nix
        uses: cachix/install-nix-action@v27
        with:
          nix_path: nixpkgs=channel:nixos-unstable

      - name: Run Nix Cache
        uses: DeterminateSystems/magic-nix-cache-action@v2

      - name: Run Synthesis
        run: |
          echo "Running Synthesis..."
          nix develop --command make synth
          echo "Synthesis complete."

      - name: Run Static Timing Analysis
        run: |
          echo "Running STA..."
          nix develop --command make sta
          echo "STA complete."

      - name: Prepare output directory
        run: |
          mkdir -p out/results
          echo "Created out/results directory."

      - name: Parse all config directories
        run: |
          echo "[]" > out/results/synth_results.json
          echo "% Auto-generated table rows" > out/results/synth_table_rows.tex

          CONFIG_DIRS=$(find out/synth -type d -name "*bits*sync*baud*" | sort)
          if [ -z "$CONFIG_DIRS" ]; then
            echo "Error: No synthesis results found in out/synth"
            exit 1
          fi

          for d in $CONFIG_DIRS; do
            echo "Processing: $d"
            CONFIG_NAME=$(basename "$d")

            # default placeholders
            GATES="N/A"
            AREA="N/A"
            COMBO_CELLS="N/A"
            SEQ_CELLS="N/A"
            BUF_INV_CELLS="N/A"
            CLOCK_PERIOD="5.0"
            SLACK="0.0"
            CRITICAL_PATH="N/A"
            SETUP_TIME="N/A"
            HOLD_TIME="N/A"
            MAX_FREQ="200.00"

            if [ -f "$d/gates.txt" ]; then
              GATES=$(cat "$d/gates.txt")
            fi

            if [ -f "$d/log.txt" ]; then
              AREA=$(grep "Chip area" "$d/log.txt" | awk '{print $5}' || echo "N/A")
              COMBO_CELLS=$(grep "Combinational cells:" "$d/log.txt" | awk '{print $3}' || echo "N/A")
              SEQ_CELLS=$(grep "Sequential cells:" "$d/log.txt" | awk '{print $3}' || echo "N/A")
              BUF_INV_CELLS=$(grep "Buf/Inv cells:" "$d/log.txt" | awk '{print $3}' || echo "N/A")

              tmp_clock=$(grep "Clock period:" "$d/log.txt" | awk '{print $3}')
              tmp_slack=$(grep "Slack:" "$d/log.txt" | head -1 | awk '{print $2}')
              tmp_cp=$(grep -A 1 "Critical path" "$d/log.txt" | grep -v "Critical path" | head -1 | tr -s ' ' | cut -d' ' -f2-)
              tmp_setup=$(grep "Setup time:" "$d/log.txt" | awk '{print $3}')
              tmp_hold=$(grep "Hold time:" "$d/log.txt" | awk '{print $3}')

              [ -n "$tmp_clock" ] && CLOCK_PERIOD=$tmp_clock
              [ -n "$tmp_slack" ] && SLACK=$tmp_slack
              [ -n "$tmp_cp" ] && CRITICAL_PATH=$tmp_cp
              [ -n "$tmp_setup" ] && SETUP_TIME=$tmp_setup
              [ -n "$tmp_hold" ] && HOLD_TIME=$tmp_hold

              freq_calc=$(awk "BEGIN {print 1000/$CLOCK_PERIOD}" 2>/dev/null)
              [ -n "$freq_calc" ] && MAX_FREQ=$(printf "%.2f" "$freq_calc")
            fi

            STA_PASSES="Yes"
            SLACK_SIGN=$(awk "BEGIN {print ($SLACK < 0) ? 1 : 0}")
            if [ "$SLACK_SIGN" -eq 1 ]; then
              STA_PASSES="No"
            fi

            DATA_BITS=$(echo "$CONFIG_NAME" | grep -oE '^[0-9]+bits' | sed 's/bits//')
            FIFO_DEPTH=$(echo "$CONFIG_NAME" | grep -oE '_[0-9]+sync_' | tr -dc '0-9')
            BAUD=$(echo "$CONFIG_NAME" | grep -oE '[0-9]+baud' | sed 's/baud//')

            DATA_BITS="${DATA_BITS:-N/A}"
            FIFO_DEPTH="${FIFO_DEPTH:-N/A}"
            BAUD="${BAUD:-N/A}"

            # Build JSON
            newObj=$(jq -n \
              --arg cfg "$CONFIG_NAME" \
              --arg gates "$GATES" \
              --arg area "$AREA" \
              --arg combo "$COMBO_CELLS" \
              --arg seq "$SEQ_CELLS" \
              --arg buf "$BUF_INV_CELLS" \
              --arg bits "$DATA_BITS" \
              --arg depth "$FIFO_DEPTH" \
              --arg bd "$BAUD" \
              --arg cper "$CLOCK_PERIOD" \
              --arg slk "$SLACK" \
              --arg cpath "$CRITICAL_PATH" \
              --arg stime "$SETUP_TIME" \
              --arg htime "$HOLD_TIME" \
              --arg freq "$MAX_FREQ" \
              --arg pass "$STA_PASSES" \
              '{
                config_name: $cfg,
                gates: $gates,
                area: $area,
                combinational_cells: $combo,
                sequential_cells: $seq,
                buffer_inverter_cells: $buf,
                data_bits: $bits,
                fifo_depth: $depth,
                baud: $bd,
                timing: {
                  clock_period: $cper,
                  slack: $slk,
                  critical_path: $cpath,
                  setup_time: $stime,
                  hold_time: $htime,
                  max_frequency_mhz: $freq,
                  sta_passes: $pass
                }
              }'
            )
            tmpf=$(mktemp)
            jq ". + [ $newObj ]" out/results/synth_results.json > "$tmpf"
            mv "$tmpf" out/results/synth_results.json

            escapedCfg=$(echo "$CONFIG_NAME" | sed 's/_/\\_/g')
            echo "\\texttt{$escapedCfg} & $FIFO_DEPTH & $DATA_BITS & $GATES \\\\ \\hline" >> out/results/synth_table_rows.tex
          done

          # Build final snippet
          echo "\\renewcommand*{\\arraystretch}{1.3}" > out/results/synthResultsSnippet.tex
          echo "\\rowcolors{2}{gray!30}{gray!10}" >> out/results/synthResultsSnippet.tex
          echo "\\begin{longtable}[H]{| p{0.22\\textwidth} | p{0.18\\textwidth} | p{0.20\\textwidth} | p{0.30\\textwidth} |}" >> out/results/synthResultsSnippet.tex
          echo "\\hline" >> out/results/synthResultsSnippet.tex
          echo "\\rowcolor{gray}" >> out/results/synthResultsSnippet.tex
          echo "\\textcolor{white}{\\textbf{Config}} & \\textcolor{white}{\\textbf{FIFO Depth}} & \\textcolor{white}{\\textbf{Data Bits}} & \\textcolor{white}{\\textbf{Gate Count}} \\\\ \\hline" >> out/results/synthResultsSnippet.tex
          echo "\\endfirsthead" >> out/results/synthResultsSnippet.tex
          echo "\\hline" >> out/results/synthResultsSnippet.tex
          echo "\\rowcolor{gray}" >> out/results/synthResultsSnippet.tex
          echo "\\textcolor{white}{\\textbf{Config}} & \\textcolor{white}{\\textbf{FIFO Depth}} & \\textcolor{white}{\\textbf{Data Bits}} & \\textcolor{white}{\\textbf{Gate Count}} \\\\ \\hline" >> out/results/synthResultsSnippet.tex
          echo "\\endhead" >> out/results/synthResultsSnippet.tex
          echo "\\hline" >> out/results/synthResultsSnippet.tex
          echo "\\endfoot" >> out/results/synthResultsSnippet.tex

          cat out/results/synth_table_rows.tex >> out/results/synthResultsSnippet.tex
          echo "\\caption{Synthesis Results for All Configs}" >> out/results/synthResultsSnippet.tex
          echo "\\end{longtable}" >> out/results/synthResultsSnippet.tex

      - name: Generate Verilog
        run: |
          echo "Generating Verilog..."
          nix develop --command make verilog
          echo "Verilog generation complete."

      - name: Prepare artifacts folder
        run: |
          mkdir -p artifacts
          cp -r out/results artifacts/
          # Copy netlists from out/synth
          find out/synth -name "*.v" -exec cp {} artifacts/ \;
          # Copy any verilog from generated/ if needed
          if [ -d "generated" ]; then
            find generated -name "*.v" -exec cp {} artifacts/ \;
          fi

      - name: Upload synthesis results
        uses: actions/upload-artifact@v4
        with:
          name: synthesis-results
          path: artifacts
