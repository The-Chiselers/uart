#!/usr/bin/env python3
"""
Split a combined Verilog file into individual module files.
This script takes a single Verilog file containing multiple modules
and splits it into separate files, one per module.
"""

import sys
import re
import os
from collections import defaultdict

def extract_modules(filename):
    """Extract individual modules from a Verilog file."""
    if not os.path.exists(filename):
        print(f"Error: File {filename} not found")
        sys.exit(1)
        
    with open(filename, 'r') as f:
        content = f.read()
    
    # Extract the header (copyright and version info)
    header_match = re.search(r'^(\/\/ Generated by CIRCT.*?)(?=module)', content, re.DOTALL)
    header = header_match.group(1) if header_match else ""
    
    # Find all module definitions
    module_matches = re.finditer(r'module\s+(\w+)\s*\(.*?endmodule', content, re.DOTALL)
    
    modules = {}
    for match in module_matches:
        module_content = match.group(0)
        module_name = match.group(1)
        modules[module_name] = header + module_content
    
    return modules, header

def write_modules_to_files(modules, header=""):
    """Write each module to its own file."""
    for module_name, content in modules.items():
        with open(f"{module_name}.v", 'w') as f:
            f.write(content)
        print(f"Created {module_name}.v")
    
    # Create a manifest file listing all modules
    with open("modules_manifest.txt", 'w') as f:
        f.write("# Generated Verilog Modules\n\n")
        for module_name in sorted(modules.keys()):
            f.write(f"{module_name}.v\n")
    
    print(f"Created modules_manifest.txt with {len(modules)} entries")
    
    # Create a file for synthesis tools that includes all modules
    with open("all_modules.v", 'w') as f:
        f.write(f"{header}\n")
        for module_name in sorted(modules.keys()):
            f.write(f"`include \"{module_name}.v\"\n")
    
    print("Created all_modules.v for including all modules")

def create_hierarchy(modules):
    """Analyze module hierarchy and create a report."""
    # Extract module instantiations to build hierarchy
    hierarchy = defaultdict(list)
    
    for parent_name, content in modules.items():
        # Find module instantiations
        for child_name in modules.keys():
            if child_name == parent_name:
                continue
                
            # Match pattern for module instantiation 
            # This regex looks for: ModuleName instance_name (...)
            pattern = rf'\b{child_name}\s+\w+\s*\('
            if re.search(pattern, content):
                hierarchy[parent_name].append(child_name)
    
    # Output hierarchy information
    with open("module_hierarchy.txt", 'w') as f:
        f.write("# Module Hierarchy\n\n")
        
        # Find top-level modules (not instantiated by others)
        instantiated = set()
        for children in hierarchy.values():
            instantiated.update(children)
        
        top_modules = [m for m in modules.keys() if m not in instantiated]
        
        f.write("## Top-level modules:\n")
        for module in top_modules:
            f.write(f"- {module}\n")
        
        f.write("\n## Module tree:\n")
        # Print hierarchy starting from top modules
        for top in top_modules:
            print_hierarchy(f, top, hierarchy, 0)
    
    print("Created module_hierarchy.txt with dependency information")

def print_hierarchy(file, module, hierarchy, level):
    """Recursively print the module hierarchy."""
    indent = "  " * level
    file.write(f"{indent}- {module}\n")
    
    for child in hierarchy.get(module, []):
        print_hierarchy(file, child, hierarchy, level + 1)

if __name__ == "__main__":
    if len(sys.argv) != 2:
        print(f"Usage: {sys.argv[0]} <combined_verilog_file>")
        sys.exit(1)
        
    filename = sys.argv[1]
    modules, header = extract_modules(filename)
    
    if not modules:
        print("No modules found in the input file")
        sys.exit(1)
        
    print(f"Found {len(modules)} modules:")
    for name in sorted(modules.keys()):
        print(f"  - {name}")
    
    write_modules_to_files(modules, header)
    create_hierarchy(modules)
    
    print("\nDone! All modules have been extracted to individual files.")